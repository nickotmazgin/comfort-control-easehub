'use strict';
const { GObject, St, Gio, GLib, Clutter } = imports.gi;
const Main = imports.ui.main;
const PanelMenu = imports.ui.panelMenu;
const PopupMenu = imports.ui.popupMenu;
const ExtensionUtils = imports.misc.extensionUtils;
const ModalDialog = imports.ui.modalDialog;

const BUS_NAME = 'org.gnome.SessionManager';
const BUS_PATH = '/org/gnome/SessionManager';
const BUS_IFACE = 'org.gnome.SessionManager';

function _spawn(cmdline) { try { GLib.spawn_command_line_async(cmdline); } catch (e) { log(`[EaseHub] spawn error: ${e}`); Main.notify('EaseHub', `Failed: ${cmdline}`); } }
function _notify(body) { Main.notify('EaseHub', body); }
function _openUrl(url) {
  try { GLib.spawn_command_line_async('xdg-open ' + GLib.shell_quote(url)); }
  catch (e) { Main.notify('EaseHub', 'Failed to open URL'); }
}

function _confirmIfNeeded(label, cb) {
  const s = ExtensionUtils.getSettings('org.gnome.shell.extensions.easehub');
  if (!s.get_boolean('confirm-dangerous')) { cb(); return; }
  const d = new ModalDialog.ModalDialog({ styleClass: 'prompt-dialog' });
  d.contentLayout.add_child(new St.Label({ text: `${label}?`, x_align: Clutter.ActorAlign.CENTER }));
  d.addButton({ label: 'Cancel', action: () => d.close(), key: Clutter.KEY_Escape });
  d.addButton({ label: 'Proceed', action: () => { d.close(); cb(); }, default: true }); d.open();
}

function _confirmWithDetails(title, details, cb) {
  const d = new ModalDialog.ModalDialog({ styleClass: 'prompt-dialog' });
  const box = new St.BoxLayout({ vertical: true, style_class: 'prompt-dialog-main-layout' });
  box.add_child(new St.Label({ text: title, x_align: Clutter.ActorAlign.CENTER }));
  const lbl = new St.Label({ text: details, y_align: Clutter.ActorAlign.FILL });
  lbl.clutter_text.line_wrap = true; box.add_child(lbl);
  d.contentLayout.add_child(box);
  d.addButton({ label: 'Cancel', action: () => d.close(), key: Clutter.KEY_Escape });
  d.addButton({ label: 'Proceed', action: () => { d.close(); cb(); }, default: true }); d.open();
}

function _which(name) { try { return GLib.find_program_in_path(name) !== null; } catch (_) { return false; } }
function _openTerminal(cmd /* string or null */) {
  const c = cmd ? cmd.replace(/"/g, '\\"') : null;\n  if (_which('kgx'))              { _spawn(c ? `kgx -e bash -lc "${c}"`               : 'kgx'); return; }\n  if (_which('gnome-terminal'))   { _spawn(c ? `gnome-terminal -- bash -lc "${c}"`    : 'gnome-terminal'); return; }\n  if (_which('tilix'))            { _spawn(c ? `tilix -e bash -lc "${c}"`             : 'tilix'); return; }\n  if (_which('kitty'))            { _spawn(c ? `kitty sh -lc "${c}"`                  : 'kitty'); return; }\n  if (_which('wezterm'))          { _spawn(c ? `wezterm start -- bash -lc "${c}"`     : 'wezterm start'); return; }\n  if (_which('x-terminal-emulator')) { _spawn(c ? `x-terminal-emulator -e bash -lc "${c}"` : 'x-terminal-emulator'); return; }\n  _notify('No terminal found (kgx, gnome-terminal, tilix, kitty, wezterm).');\n}\nfunction _openScreenshot() {\n  try {\n    if (Main.screenshotUI && Main.screenshotUI.openScreenshotUI) {\n      Main.screenshotUI.openScreenshotUI();\n      return;\n    }\n  } catch (e) {}\n\n  const haveLegacy = GLib.find_program_in_path('gnome-screenshot') !== null;\n  if (!haveLegacy) {\n    let cmd = 'sudo apt install gnome-screenshot';\n    if (GLib.find_program_in_path('dnf'))    cmd = 'sudo dnf install gnome-screenshot';\n    if (GLib.find_program_in_path('zypper')) cmd = 'sudo zypper install gnome-screenshot';\n    if (GLib.find_program_in_path('pacman')) cmd = 'sudo pacman -S --needed gnome-screenshot';\n    _notify('Legacy screenshot tool is not installed. Install with: ' + cmd);\n    return;\n  }\n  _notify('Using legacy screenshot tool (gnome-screenshot)');\n  _spawn('gnome-screenshot -i');\n}\n\n\nvar EaseHubIndicator = GObject.registerClass(\nclass EaseHubIndicator extends PanelMenu.Button {\n  _init() {\n    super._init(0.0, 'EaseHub');\n    this._settings = ExtensionUtils.getSettings('org.gnome.shell.extensions.easehub');\n    this.add_child(new St.Icon({ icon_name: 'system-run-symbolic', style_class: 'easehub-icon' }));\n    this._buildMenu();\n  }\n  _buildMenu() {\n    this.menu.removeAll();\n    const enabled = new Set(this._settings.get_strv('enabled-actions'));\n    const add = (label, id, cb, iconName) => {\n      if (!enabled.has(id)) return;\n      const it = new PopupMenu.PopupMenuItem(label);\n      if (iconName) it.insert_child_at_index(new St.Icon({icon_name: iconName, style_class: 'popup-menu-icon'}), 0);\n      it.connect('activate', cb); this.menu.addMenuItem(it);\n    };\n\n    // System\n    add('Lock Screen', 'lock', () => this._lock(), 'changes-prevent-symbolic');\n    add('Log Out',   'logout',   () => _confirmIfNeeded('Log out',   () => this._sessionCall('Logout', 1)), 'system-log-out-symbolic');\n    add('Reboot',    'reboot',   () => _confirmIfNeeded('Reboot',    () => this._sessionCall('Reboot', true)), 'system-reboot-symbolic');\n    add('Power Off', 'poweroff', () => _confirmIfNeeded('Power off', () => this._sessionCall('PowerOff', true)), 'system-shutdown-symbolic');\n    add('Suspend',   'suspend',  () => this._sessionCall('Suspend', true), 'media-playback-pause-symbolic');\n\n    this.menu.addMenuItem(new PopupMenu.PopupSeparatorMenuItem());\n  const aboutItem = new PopupMenu.PopupMenuItem('About & Donate…');\n  aboutItem.insert_child_at_index(new St.Icon({ icon_name: 'help-about-symbolic', style_class: 'popup-menu-icon' }), 0);\n  aboutItem.connect('activate', () => _openUrl('https://github.com/nickotmazgin/comfort-control-easehub#readme'));\n  this.menu.addMenuItem(aboutItem);\n  const donateItem = new PopupMenu.PopupMenuItem('Donate (PayPal)…');\n  donateItem.insert_child_at_index(new St.Icon({ icon_name: 'emblem-favorite-symbolic', style_class: 'popup-menu-icon' }), 0);\n  donateItem.connect('activate', () => _openUrl('https://www.paypal.me/NickOtmazgin'));\n  this.menu.addMenuItem(donateItem);\n\n\n    // Toggles\n    add('Do Not Disturb', 'dnd', () => this._toggleDND(), 'notifications-disabled-symbolic');\n    add('Dark/Light Mode','darkmode', () => this._toggleDark(), 'weather-clear-night-symbolic');\n\n    this.menu.addMenuItem(new PopupMenu.PopupSeparatorMenuItem());\n\n    // Apps\n    add('Open Settings', 'settings',   () => _spawn('gnome-control-center'), 'emblem-system-symbolic');\n    add('Extensions',    'extensions', () => _spawn('gnome-extensions-app'), 'application-x-addon-symbolic');\n    add('Tweaks',        'tweaks',     () => _spawn('gnome-tweaks'), 'emblem-system-symbolic');\n    add('Open Terminal', 'open-terminal', () => _openTerminal(null), 'utilities-terminal-symbolic');\n\n    this.menu.addMenuItem(new PopupMenu.PopupSeparatorMenuItem());\n\n    // Utilities\n    add('Clear Clipboard','clipboard-clear', () => this._clearClipboard(), 'edit-clear-all-symbolic');\n    add('Screenshot',     'screenshot',      () => _openScreenshot(), 'camera-photo-symbolic');\n\n    // Updates — explicit consent + hold-open, with location info\n    const info = "\n\nThis will open in your terminal (starting in your home folder ~).";\n    add('Check Updates (APT: update)', 'apt-update', () => {\n      _confirmWithDetails('Check updates (APT)','This will run:\n\n  sudo apt update' + info,\n        () => _openTerminal('sudo apt update; echo; echo \"All done! Press ENTER to close…\"; read'));\n    }, 'software-update-available-symbolic');\n\n    add('Upgrade Packages (APT: upgrade)', 'apt-upgrade', () => {\n      _confirmWithDetails('Upgrade packages (APT)','This will run:\n\n  sudo apt upgrade -y' + info,\n        () => _openTerminal('sudo apt upgrade -y; echo; echo \"All done! Press ENTER to close…\"; read'));\n    }, 'system-software-update-symbolic');\n\n    add('Update Flatpaks', 'flatpak-update', () => {\n      _confirmWithDetails('Update Flatpaks','This will run:\n\n  flatpak update -y' + info,\n        () => _openTerminal('flatpak update -y; echo; echo \"All done! Press ENTER to close…\"; read'));\n    }, 'system-software-update-symbolic');\n  }\n\n  _sessionCall(method, arg) {\n    try {\n      const proxy = new Gio.DBusProxy.sync(\n        Gio.DBus.session, Gio.DBusProxyFlags.NONE, null,\n        BUS_NAME, BUS_PATH, BUS_IFACE, null);\n      if (arg === undefined) proxy.call_sync(method, null, Gio.DBusCallFlags.NONE, -1, null);\n      else proxy.call_sync(method, new GLib.Variant('(b)', [arg === true]), Gio.DBusCallFlags.NONE, -1, null);\n    } catch (e) { log(`[EaseHub] Session call error: ${e}`); Main.notify('EaseHub', `Failed to execute ${method}`); }\n  }\n  _lock() {\n    try {\n      const proxy = new Gio.DBusProxy.sync(\n        Gio.DBus.session, Gio.DBusProxyFlags.NONE, null,\n        'org.gnome.ScreenSaver', '/org/gnome/ScreenSaver', 'org.gnome.ScreenSaver', null);\n      proxy.call_sync('Lock', null, Gio.DBusCallFlags.NONE, -1, null);\n    } catch (e) { log(`[EaseHub] Lock error: ${e}`); Main.notify('EaseHub', 'Failed to lock screen'); }\n  }\n  _toggleDND() {\n    try {\n      const s = new Gio.Settings({ schema_id: 'org.gnome.desktop.notifications' });\n      const show = s.get_boolean('show-banners');\n      s.set_boolean('show-banners', !show);\n      Main.notify('EaseHub', `Do Not Disturb: ${show ? 'ON' : 'OFF'}`);\n    } catch (e) { log(`[EaseHub] DND error: ${e}`); }\n  }\n  _toggleDark() {\n    try {\n      const s = new Gio.Settings({ schema_id: 'org.gnome.desktop.interface' });\n      const cur = s.get_string('color-scheme');\n      s.set_string('color-scheme', cur === 'prefer-dark' ? 'prefer-light' : 'prefer-dark');\n    } catch (e) { log(`[EaseHub] Dark mode toggle error: ${e}`); }\n  }\n  _clearClipboard() {\n    try {\n      const clip = St.Clipboard.get_default();\n      clip.set_text(St.ClipboardType.CLIPBOARD, '');\n      Main.notify('EaseHub', 'Clipboard cleared');\n    } catch (e) { log(`[EaseHub] Clipboard clear error: ${e}`); }\n  }\n});\n\nclass Extension {\n  enable() { this._indicator = new EaseHubIndicator(); Main.panel.addToStatusArea('easehub', this._indicator, 1, 'right'); }\n  disable() { if (this._indicator) { this._indicator.destroy(); this._indicator = null; } }\n}\nfunction init() { return new Extension(); }\n